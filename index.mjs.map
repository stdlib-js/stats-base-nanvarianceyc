{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/ndarray.js","../lib/accessors.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvarianceyc( 4, 1.0, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvarianceyc( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default nanvarianceyc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanvarianceyc( 5, 1.0, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvarianceyc( N, correction, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar o;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, correction, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = x[ offsetX ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += strideX;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\n\nexport default nanvarianceyc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = nanvarianceyc( 5, 1.0, arraylike2object( x ), 2, 1 );\n* // returns 6.25\n*/\nfunction nanvarianceyc( N, correction, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\t// Cache a reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to an element accessor:\n\txget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = xget( xbuf, offsetX );\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += strideX;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\n\nexport default nanvarianceyc;\n"],"names":["nanvarianceyc","N","correction","x","strideX","offsetX","sum","ix","nc","S","o","v","d","n","i","NaN","arraylike2object","accessorProtocol","xbuf","xget","data","accessors","ndarray","stride2offset"],"mappings":";;2MAmDA,SAASA,EAAeC,EAAGC,EAAYC,EAAGC,GACzC,OCAD,SAAwBH,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAOc,IAGR,IADAL,EAAIM,EAAkBb,IACfc,iBACN,OCjBF,SAAwBhB,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIa,EACAC,EACAb,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EAQJ,GALAI,EAAOf,EAAEiB,KAGTD,EAAOhB,EAAEkB,UAAW,GAET,IAANpB,GAAuB,IAAZG,EAEf,OADAO,EAAIQ,EAAMD,EAAMb,KACLM,GAAKV,EAAEC,EAAa,EACvB,EAEDa,IAKR,IAHAR,EAAKF,EAGCS,EAAI,EAAGA,EAAIb,IAChBU,EAAIQ,EAAMD,EAAMX,KACLI,EAFQG,IAKnBP,GAAMH,EAEP,GAAKU,IAAMb,EACV,OAAOc,IAOR,IALAR,GAAMH,EACNE,EAAMK,EACNF,EAAI,EACJK,GAAK,EACLD,EAAI,EACKC,EAAIb,EAAGa,KACfH,EAAIQ,EAAMD,EAAMX,KACLI,IAIVF,GAAM,IAHNI,GAAK,IAGSA,EAAE,KADhBD,EAAKC,EAAEF,GADPL,GAAOK,IAEoBC,GAE5BL,GAAMH,EAGP,OADAI,EAAKK,EAAIX,IACE,EACHa,IAEDN,EAAID,CACZ,CDzCSa,CAAWpB,EAAGC,EAAYQ,EAAGN,EAASC,GAE9C,GAAW,IAANJ,GAAuB,IAAZG,EAEf,OADAO,EAAIR,EAAGE,KACIM,GAAKV,EAAEC,EAAa,EACvB,EAEDa,IAKR,IAHAR,EAAKF,EAGCS,EAAI,EAAGA,EAAIb,IAChBU,EAAIR,EAAGI,KACII,EAFQG,IAKnBP,GAAMH,EAEP,GAAKU,IAAMb,EACV,OAAOc,IAOR,IALAR,GAAMH,EACNE,EAAMK,EACNF,EAAI,EACJK,GAAK,EACLD,EAAI,EACKC,EAAIb,EAAGa,KACfH,EAAIR,EAAGI,KACII,IAIVF,GAAM,IAHNI,GAAK,IAGSA,EAAE,KADhBD,EAAKC,EAAEF,GADPL,GAAOK,IAEoBC,GAE5BL,GAAMH,EAGP,OADAI,EAAKK,EAAIX,IACE,EACHa,IAEDN,EAAID,CACZ,CD1DQc,CAASrB,EAAGC,EAAYC,EAAGC,EAASmB,EAAetB,EAAGG,GAC9D"}